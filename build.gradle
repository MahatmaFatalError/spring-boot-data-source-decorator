buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
}

plugins {
    id "com.jfrog.bintray" version "1.8.0"
    id "pl.allegro.tech.build.axion-release" version "1.9.1"
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "gavlyukovskiy"
            name "Arthur Gavlyukovskiy"
            email "agavlyukovskiy@gmail.com"
        }
    }

    scm {
        url "https://github.com/gavlyukovskiy/spring-boot-data-source-decorator"
    }
}

task releaseCheck() {
    doLast {
        def errors = []
        if (!project.hasProperty('release.version'))
            errors.add("'-Prelease.version' must be set")
        if (!project.hasProperty('release.customUsername'))
            errors.add("'-Prelease.customUsername' must be set")
        if (!project.hasProperty('release.customPassword'))
            errors.add("'-Prelease.customPassword' must be set")
        if (!errors.isEmpty()) {
            throw new IllegalStateException(errors.join("\n"));
        }
    }
}

task bintrayUploadCheck() {
    doLast {
        def errors = []
        if (project.version.contains("SNAPSHOT")) {
            errors.add("Cannot release SNAPSHOT version")
        }
        if (!System.getenv('BINTRAY_USER') && !project.hasProperty('release.bintray_user'))
            errors.add("'BINTRAY_USER' or '-Prelease.bintray_user' must be set")
        if (!System.getenv('BINTRAY_KEY') && !project.hasProperty('release.bintray_key'))
            errors.add("'BINTRAY_KEY' or '-Prelease.bintray_key' must be set")
        if (!System.getenv('GPG_PASSPHRASE') && !project.hasProperty('release.gpg_passphrase'))
            errors.add("'GPG_PASSPHRASE' or '-Prelease.gpg_passphrase' must be set")
        if (!System.getenv('SONATYPE_USER') && !project.hasProperty('release.sonatype_user'))
            errors.add("'SONATYPE_USER' or '-Prelease.sonatype_user' must be set")
        if (!System.getenv('SONATYPE_PASSWORD') && !project.hasProperty('release.sonatype_password'))
            errors.add("'SONATYPE_PASSWORD' or '-Prelease.sonatype_password' must be set")
        if (!errors.isEmpty()) {
            throw new IllegalStateException(errors.join("\n"));
        }
    }
}

subprojects {
    ext {
        springBootVersion = '2.0.3.RELEASE'
        p6SpyVersion = '3.7.0'
        datasourceProxyVersion = '1.4.9'
        flexyPoolVersion = '1.3.0'
        sleuthVersion = '1.3.1.RELEASE'
        micrometerVersion = '1.0.4'

        release = !project.name.contains("sample")
    }

    apply plugin: 'java'

    scmVersion {
        versionIncrementer 'incrementPatch'
        tag {
            prefix = ''
            versionSeparator = ''
        }

        nextVersion {
            suffix = 'rc'
        }
    }

    group 'com.github.gavlyukovskiy'
    version = scmVersion.version

    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
        maven() { url 'http://repo.spring.io/milestone' }
        maven() { url 'http://repo.spring.io/snapshot' }
    }

    if (ext.release) {
        apply plugin: 'maven-publish'
        apply plugin: 'com.jfrog.bintray'

        publishing {
            publications {
                mavenJava(MavenPublication) {
                    from components.java
                    artifact sourceJar
                    artifact javadocJar
                    groupId project.group
                    artifactId project.name
                    version scmVersion.version
                    pom.withXml {
                        def root = asNode()
                        root.appendNode('description', 'Spring Boot integration with p6spy, datasource-proxy and flexy-pool')
                        root.appendNode('name', 'spring-boot-data-source-decorator')
                        root.appendNode('url', 'https://github.com/gavlyukovskiy/spring-boot-data-source-decorator')
                        root.children().last() + pomConfig
                    }
                }
            }
        }

        bintray {
            user = System.getenv('BINTRAY_USER') ?: project.findProperty('release.bintray_user')
            key = System.getenv('BINTRAY_KEY') ?: project.findProperty('release.bintray_key')
            publications = ['mavenJava']
            publish = true
            pkg {
                repo = project.group
                name = project.name
                licenses = ['Apache-2.0']
                publicDownloadNumbers = true
                version {
                    name = scmVersion.version
                    released = new Date()
                    vcsTag = scmVersion.tag.prefix + scmVersion.tag.versionSeparator + scmVersion.version
                    gpg {
                        sign = true
                        passphrase = System.getenv('GPG_PASSPHRASE') ?: project.findProperty('release.gpg_passphrase')
                    }
                    mavenCentralSync {
                        sync = true
                        user = System.getenv('SONATYPE_USER') ?: project.findProperty('release.sonatype_user')
                        password = System.getenv('SONATYPE_PASSWORD') ?: project.findProperty('release.sonatype_password')
                        close = '1'
                    }
                }
            }
        }

        task sourceJar(type: Jar, dependsOn: classes) {
            classifier 'sources'
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        tasks.withType(Jar) {
            from(rootProject.projectDir) {
                include 'LICENSE.txt'
                into 'META-INF'
            }
        }
    }
}

verifyRelease.finalizedBy(releaseCheck)
bintrayUpload.dependsOn(bintrayUploadCheck)
subprojects.each {
    if (it.ext.release)
        verifyRelease.dependsOn("${it.name}:build")
}